local Players = game:GetService("Players")
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local rootPart = character:WaitForChild("HumanoidRootPart")

-- Tables for highlights and noclip
local highlights = {}
local noclipConnection = nil

-- Toggle states
local isHighlightActive = false
local isJumpActive = false
local isNoclipActive = false

-- Highlight key objects and NPCs
local function highlightObjects()
    for _, obj in pairs(workspace:GetDescendants()) do
        if (obj:IsA("Model") and (obj.Name == "DarcyDog" or obj.Name == "Paco" or obj.Name == "PoliceNPC")) or
           (obj:IsA("BasePart") and (obj.Name == "GrapeJuice" or obj.Name == "TastyDrink" or obj.Name == "Bone" or 
                                     obj.Name == "Battery" or obj.Name == "WoodenDoor" or obj.Name == "Keypad")) then
            local highlight = Instance.new("Highlight")
            highlight.Parent = obj
            highlight.FillTransparency = 0.7
            highlight.OutlineColor = Color3.fromRGB(obj.Name == "DarcyDog" and 255 or 0, obj.Name == "DarcyDog" and 0 or 255, 0)
            highlights[obj] = highlight
        end
    end
end

-- Clear highlights
local function clearHighlights()
    for _, highlight in pairs(highlights) do
        if highlight then
            highlight:Destroy()
        end
    end
    highlights = {}
end

-- Toggle jump
local function toggleJump(character, enabled)
    local humanoid = character and character:FindFirstChild("Humanoid")
    if humanoid then
        humanoid.JumpPower = enabled and 50 or 0
    end
end

-- Toggle noclip
local function toggleNoclip(character, enabled)
    local humanoid = character and character:FindFirstChild("Humanoid")
    if humanoid then
        if enabled then
            noclipConnection = game:GetService("RunService").Stepped:Connect(function()
                humanoid:ChangeState(Enum.HumanoidStateType.Physics)
            end)
        else
            if noclipConnection then
                noclipConnection:Disconnect()
                noclipConnection = nil
            end
        end
    end
end

-- Teleport to target
local function teleportTo(targetName)
    if character and rootPart then
        for _, obj in pairs(workspace:GetDescendants()) do
            if obj.Name == targetName and (obj:IsA("BasePart") or obj:IsA("Model")) then
                local cframe = obj:IsA("Model") and obj:GetPrimaryPartCFrame() or obj.CFrame
                if cframe then
                    rootPart.CFrame = cframe + Vector3.new(0, 3, 0)
                    return true
                end
            end
        end
    end
    return false
end

-- UI setup
local Window = Fluent:CreateWindow({
    Title = "PIG 64 Nor Skin",
    Theme = "Dark",
    Size = UDim2.new(0, 500, 0, 400)
})

local Tabs = {
    Main = Window:CreateTab({
        Title = "Main",
        Icon = "rbxassetid://10734949875"
    }),
    Settings = Window:CreateTab({
        Title = "Settings",
        Icon = "rbxassetid://10709819011"
    })
}

-- Main tab toggles
Tabs.Main:AddToggle({
    Title = "Highlight Items & NPCs",
    Callback = function(value)
        isHighlightActive = value
        if value then
            highlightObjects()
        else
            clearHighlights()
        end
    end
})

Tabs.Main:AddToggle({
    Title = "Enable Jump",
    Callback = function(value)
        isJumpActive = value
        toggleJump(character, value)
    end
})

Tabs.Main:AddToggle({
    Title = "Noclip",
    Callback = function(value)
        isNoclipActive = value
        toggleNoclip(character, value)
    end
})

-- Main tab buttons
Tabs.Main:AddButton({
    Title = "Go to Grape Juice",
    Callback = function()
        if not teleportTo("GrapeJuice") then
            Fluent:Notify({Title = "Error", Content = "Grape Juice not found!", Duration = 3})
        end
    end
})

Tabs.Main:AddButton({
    Title = "Go to Tasty Drink",
    Callback = function()
        if not teleportTo("TastyDrink") then
            Fluent:Notify({Title = "Error", Content = "Tasty Drink not found!", Duration = 3})
        end
    end
})

Tabs.Main:AddButton({
    Title = "Go to Wooden Door",
    Callback = function()
        if not teleportTo("WoodenDoor") then
            Fluent:Notify({Title = "Error", Content = "Wooden Door not found!", Duration = 3})
        end
    end
})

Tabs.Main:AddButton({
    Title = "Go to Darcy Dog",
    Callback = function()
        if not teleportTo("DarcyDog") then
            Fluent:Notify({Title = "Error", Content = "Darcy Dog not found!", Duration = 3})
        end
    end
})

Tabs.Main:AddButton({
    Title = "Go to Paco",
    Callback = function()
        if not teleportTo("Paco") then
            Fluent:Notify({Title = "Error", Content = "Paco not found!", Duration = 3})
        end
    end
})

Tabs.Main:AddButton({
    Title = "Go to Police NPC",
    Callback = function()
        if not teleportTo("PoliceNPC") then
            Fluent:Notify({Title = "Error", Content = "Police NPC not found!", Duration = 3})
        end
    end
})

Tabs.Main:AddButton({
    Title = "Enter Code 6845",
    Callback = function()
        if teleportTo("Keypad") then
            Fluent:Notify({Title = "Info", Content = "At Keypad. Enter 6845 manually!", Duration = 3})
        else
            Fluent:Notify({Title = "Error", Content = "Keypad not found!", Duration = 3})
        end
    end
})

-- Settings tab button
Tabs.Settings:AddButton({
    Title = "Save Config",
    Callback = function()
        SaveManager:Save()
        Fluent:Notify({Title = "Success", Content = "Config saved!", Duration = 3})
    end
})

-- Handle character respawn
player.CharacterAdded:Connect(function(newChar)
    character = newChar
    rootPart = newChar:WaitForChild("HumanoidRootPart")
    toggleJump(newChar, isJumpActive)
    toggleNoclip(newChar, isNoclipActive)
end)

-- Initial setup
toggleJump(character, isJumpActive)
toggleNoclip(character, isNoclipActive)
